import assert from 'node:assert/strict';
import {_power_} from "@power-assert/runtime";
const _pasrt1 = _power_(assert, null, "assert(5 < actual && actual < 13)");
const _parg1 = _pasrt1.recorder(0);
const _pasrt2 = _power_(assert.ok, assert, "assert.ok(actual < 5 || 13 < actual)");
const _parg2 = _pasrt2.recorder(0);
const _pasrt3 = _power_(assert, null, "assert(2 > actual && actual < 13)");
const _parg3 = _pasrt3.recorder(0);
const _pasrt4 = _power_(assert, null, "assert(2   >   actual    &&  actual     <  13)");
const _parg4 = _pasrt4.recorder(0);
const _pasrt5 = _power_(assert.equal, assert, "assert.equal(5 < actual && actual < 13, falsy)");
const _parg5 = _pasrt5.recorder(0);
const _parg6 = _pasrt5.recorder(1);
_pasrt1.run(_parg1.rec(_parg1.tap(_parg1.tap(5, 7) < _parg1.tap(actual, 11), 9) && _parg1.tap(_parg1.tap(actual, 21) < _parg1.tap(13, 30), 28), 18));
_pasrt2.run(_parg2.rec(_parg2.tap(_parg2.tap(actual, 10) < _parg2.tap(5, 19), 17) || _parg2.tap(_parg2.tap(13, 24) < _parg2.tap(actual, 29), 27), 21));
_pasrt3.run(_parg3.rec(_parg3.tap(_parg3.tap(2, 7) > _parg3.tap(actual, 11), 9) && _parg3.tap(_parg3.tap(actual, 21) < _parg3.tap(13, 30), 28), 18));
_pasrt4.run(_parg4.rec(_parg4.tap(_parg4.tap(2, 7) > _parg4.tap(actual, 15), 11) && _parg4.tap(_parg4.tap(actual, 29) < _parg4.tap(13, 43), 40), 25));
_pasrt5.run(_parg5.rec(_parg5.tap(_parg5.tap(5, 13) < _parg5.tap(actual, 17), 15) && _parg5.tap(_parg5.tap(actual, 27) < _parg5.tap(13, 36), 34), 24), _parg6.rec(falsy, 40));
