import {_power_} from "@power-assert/runtime";
const _pasrt1 = _power_(assert, null, "assert(counter += 1)");
const _parg1 = _pasrt1.recorder(0);
const _pasrt2 = _power_(assert, null, "assert(dog.age += 1)");
const _parg2 = _pasrt2.recorder(0);
const _pasrt3 = _power_(assert, null, "assert(dog.age    +=  1)");
const _parg3 = _pasrt3.recorder(0);
const _pasrt4 = _power_(assert.strictEqual, assert, "assert.strictEqual(dog.age += 1, three)");
const _parg4 = _pasrt4.recorder(0);
const _parg5 = _pasrt4.recorder(1);
const _pasrt5 = _power_(assert, null, "assert([x] = [3])");
const _parg6 = _pasrt5.recorder(0);
const _pasrt6 = _power_(assert, null, "assert([x] = [foo])");
const _parg7 = _pasrt6.recorder(0);
import assert from 'node:assert/strict';
_pasrt1.run(_parg1.rec(counter += _parg1.tap(1, "arguments/0/right", 18), "arguments/0", 15));
_pasrt2.run(_parg2.rec(dog.age += _parg2.tap(1, "arguments/0/right", 18), "arguments/0", 15));
_pasrt3.run(_parg3.rec(dog.age += _parg3.tap(1, "arguments/0/right", 22), "arguments/0", 18));
_pasrt4.run(_parg4.rec(dog.age += _parg4.tap(1, "arguments/0/right", 30), "arguments/0", 27), _parg5.rec(three, "arguments/1", 33));
_pasrt5.run(_parg6.rec([x] = _parg6.tap([_parg6.tap(3, "arguments/0/right/elements/0", 14)], "arguments/0/right", 13), "arguments/0", 11));
_pasrt6.run(_parg7.rec([x] = _parg7.tap([_parg7.tap(foo, "arguments/0/right/elements/0", 14)], "arguments/0/right", 13), "arguments/0", 11));
